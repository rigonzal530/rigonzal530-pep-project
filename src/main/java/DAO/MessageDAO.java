package DAO;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import Model.Message;
import Util.ConnectionUtil;

public class MessageDAO {

    /**
     * Retrieves all messages from the Message table
     * @return A list containing all messages from the Message table as fully populated Message objects
     */
    public List<Message> getAllMessages() {
        // creates an empty list to store all messages from the Message table
        List<Message> messages = new ArrayList<>();

        // attempts to establish a connection with the database
        Connection connection = ConnectionUtil.getConnection();

        try {
            // no parameters needed to retrieve all messages
            String query = "SELECT * FROM message";

            // setting up a prepared statement. this could also be a regular statement since there aren't any parameters
            PreparedStatement ps = connection.prepareStatement(query);

            // executing the insert statement
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                // creates a fully populated Message using column indices and adds it to the list
                Message currMsg = new Message(rs.getInt(1), rs.getInt(2), rs.getString(3), rs.getLong(4));
                messages.add(currMsg);
            }
        }
        catch(SQLException e) {
            System.out.println(e.getMessage());
        }

        return messages;
    }

    /**
     * Inserts a new message into the Message table
     * @param msg - the Message object to be inserted (without a message_id)
     * @return the newly inserted Message along with its message_id on successful insertion, or null on failure
     */
    public Message insertMessage(Message msg) {
        // attempts to establish a connection with the database
        Connection connection = ConnectionUtil.getConnection();

        try {
            // message_id is automatically generated by the database, so only the remaining parameters are specified
            String insert = "INSERT INTO message (posted_by, message_text, time_posted_epoch) VALUES (?, ?, ?)";

            // setting up a prepared statement with parameters from the account to be inserted
            // the second parameter in prepareStatement method MUST be included to make automatically generated keys retrievable later
            PreparedStatement ps = connection.prepareStatement(insert, Statement.RETURN_GENERATED_KEYS);
            ps.setInt(1, msg.getPosted_by());
            ps.setString(2, msg.getMessage_text());
            ps.setLong(3, msg.getTime_posted_epoch());

            // executing the insert statement
            ps.executeUpdate();

            // extracting the message_id generated on successful insert
            ResultSet messageIDResultSet = ps.getGeneratedKeys();
            if (messageIDResultSet.next()) {
                // returns a fully populated Message object 
                int generatedMessageID = messageIDResultSet.getInt("message_id");
                return new Message(generatedMessageID, msg.getPosted_by(), msg.getMessage_text(), msg.getTime_posted_epoch());
            }
        }
        catch(SQLException e) {
            System.out.println(e.getMessage());
        }

        return null;
    }

    /**
     * Checks if a user is real and existing within the Account table by searching for their account ID.
     * (Though this deals with checking the account table, it is only needed for messages. so it resides in the Message DAO)
     * 
     * @param account_id - account ID to be searched for
     * @return true if a matching account_id was found within the database. otherwise false
     */
    public boolean isValidUser(int account_id) {
        boolean validUser = false;

        // attempts to establish a connection with the database
        Connection connection = ConnectionUtil.getConnection();

        try {
            // searches the Account table for an entry matching the provided account ID
            // only returns the account_id column to protect the user's username and password
            String query = "SELECT account_id FROM account WHERE account_id = ?";

            // setting up a prepared statement and its parameter
            PreparedStatement ps = connection.prepareStatement(query);
            ps.setInt(1, account_id);

            // executes the prepared query and stores the results (if any) in matchingUser
            // matchingUser will either contain a single entry or be empty since account_id's are unique
            ResultSet matchingUser = ps.executeQuery();
            if (matchingUser.next()) {
                // if a match was found, the given account ID is valid
                validUser = true;
            }
        }
        catch(SQLException e) {
            System.out.println(e.getMessage());
        }

        // else the provided account_id didn't exist within the Account table, so return false;
        return validUser;
    }
}
